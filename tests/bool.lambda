#pragma disable_type_checking
(* Thunks. *)
let force = fun x -> x 0 ;;
(* Church Booleans. *)
let false = fun x -> fun y -> y ;;
let true = fun x -> fun y -> x ;;
let k = true ;;
let cond = fun p -> fun x -> fun y -> p x y ;;
let forcecond = fun p -> fun x -> fun y -> force (p x y) ;;
let bool2int = fun b -> cond b 1 0 ;;
let _ = print (bool2int true) ;;
let _ = print (bool2int false) ;;
(* Church pairs. *)
let pair = fun x -> fun y -> fun p -> cond p x y ;;
let fst = fun p -> p true ;;
let snd = fun p -> p false ;;
(* Church naturals. *)
let zero = fun f -> fun x -> x ;;
let one = fun f -> fun x -> f x ;;
let plus = fun m -> fun n -> fun f -> fun x -> m f (n f x) ;;
let two = plus one one ;;
let three = plus one two ;;
let four = plus two two ;;
let five = plus four one ;;
let six = plus four two ;;
let succ = plus one ;;
let mult = fun m -> fun n -> fun f -> m (n f) ;;
let exp = fun m -> fun n -> n m ;;
let is_zero = fun n -> n (k false) true ;;
let convert = fun n -> n (fun x -> x + 1) 0 ;;
let _ = print (bool2int (is_zero zero)) ;;
let _ = print (bool2int (is_zero one)) ;;
let _ = print (bool2int (is_zero two)) ;;
(* Factorial, based on Church naturals. *)
let loop = fun p ->
  let n = succ (fst p) in
  pair n (mult n (snd p))
;;
let fact = fun n ->
  snd (n loop (pair zero one))
;;
let _ = print (convert (fact four)) ;;
let _ = print (convert (fact five)) ;;
(* Fibonacci, based on Church naturals. *)
let loop = fun p ->
  let fib1 = fst p in
  pair (plus fib1 (snd p)) fib1
;;
let fib = fun n ->
  snd (n loop (pair one one))
;;
let _ = print (convert (fib five)) ;;
let _ = print (convert (fib six)) ;;
(* Predecessor. *)
let loop = fun p ->
  let pred = fst p in
  pair (succ pred) pred
;;
let pred = fun n ->
  snd (n loop (pair zero zero))
;;
let _ = print (convert (pred six)) ;;
(* Comparison, yield;;g a Church Boolean. *)
let geq = fun m -> fun n ->
  m pred n (k false) true
;;
let _ = print (bool2int (geq four six)) ;;
let _ = print (bool2int (geq six one)) ;;
(* Iteration. *)
let iter = fun f -> fun n ->
  n f (f one)
;;
(* Ackermann's function. *)
let ack = fun n -> n iter succ n ;;
let _ = print (convert (ack two)) ;;
(* A fixpoint. *)
let fix = fun f -> (fun y -> f (fun z -> y y z)) (fun y -> f (fun z -> y y z)) ;;
(* Another version of fact. *)
let fact = fun n ->
  fix (fun fact -> fun n -> forcecond (is_zero n) (fun _ -> one) (fun _ -> mult n (fact (pred n)))) n
;;
let _ = print (convert (fact zero)) ;;
let _ = print (convert (fact one)) ;;
let _ = print (convert (fact two)) ;;
let _ = print (convert (fact three)) ;;
let _ = print (convert (fact four)) ;;
let _ = print (convert (fact five)) ;;

print 42
