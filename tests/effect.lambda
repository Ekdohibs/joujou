effect choose = Choose : int

type intlist = | Nil | Cons of int * intlist
let choose = fun a -> fun b ->
  ifzero Choose then a else b

let f = fun x ->
  let u = choose 5 12 in
  let v = choose 3 17 in
  u + v

let run_zero = fun f ->
  match f 0 with
  | x -> x
  | effect Choose k -> k 0

let rec append = fun l1 -> fun l2 ->
  match l1 with
  | Nil -> l2
  | Cons (x, l1) -> Cons (x, append l1 l2)

let run_all = fun f ->
  match f 0 with
  | x -> Cons (x, Nil)
  | effect Choose k -> append (k 0) (k 1)

let rec print_list = fun l ->
  match l with
  | Nil -> 0
  | Cons (x, l) -> let _ = print x in print_list l

let _ = print (run_zero f)
let _ = print_list (run_all f)

effect choose2 = Choose2 : int
let choose2 = fun a -> fun b ->
  ifzero Choose2 then a else b

let f = fun x ->
  let u = choose 5 12 in
  let v = choose2 3 17 in
  u + v

let test1 = fun f ->
  match f 0 with
  | x -> x
  | effect Choose k -> k 0
  | effect Choose2 k -> k 1

let test2 = fun f ->
  match
    (match f 0 with
     | x -> x
     | effect Choose k -> k 0
    ) with
  | x -> Cons (x, Nil)
  | effect Choose2 k -> append (k 0) (k 1)

let test3 = fun f ->
  match
    (match f 0 with
     | x -> x
     | effect Choose2 k -> k 0
    ) with
  | x -> Cons (x, Nil)
  | effect Choose k -> append (k 0) (k 1)

let test4 = fun f ->
  match
    (match f 0 with
     | x -> Cons (x, Nil)
     | effect Choose k -> append (k 0) (k 1)
    ) with
  | x -> x
  | effect Choose2 k -> k 1


let _ = print (test1 f)
let _ = print_list (test2 f)
let _ = print_list (test3 f)
let _ = print_list (test4 f)